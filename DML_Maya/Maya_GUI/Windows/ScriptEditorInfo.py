

import maya.cmds as cmds
from .. import UI_Object

########################################################################
class ScriptEditorInfo(UI_Object.UI):
	"""
	Use this command to directly manipulate and query the contents of the
	Command Window window.
	"""
	#----------------------------------------------------------------------
	def __init__(self, name=None, **kwargs):
		parent = None
		if "qtParent" in kwargs:
			parent = kwargs.pop("qtParent")
			
		if name == None:
			name = cmds.scriptEditorInfo(**kwargs)
			super(ScriptEditorInfo, self).__init__(name, **dict(qtParent=parent))
			
		else:
			if cmds.scriptEditorInfo(name, exists=True):
				super(ScriptEditorInfo, self).__init__(name)
			else:
				name = cmds.scriptEditorInfo(name, **kwargs)
				super(ScriptEditorInfo, self).__init__(name, **dict(qtParent=parent))
	#----------------------------------------------------------------------
	def clearHistory(self,value):
		"""
		
				Clears the read-only text in the upper field of the Command Window.
				
		"""
		self.edit(clearHistory=value)
	#----------------------------------------------------------------------
	def clearHistoryFile(self,value):
		"""
		
				Clear the file defined by the -hf/historyFilename flag, but only
				if -wh/writeHistory is true. Use this flag to start a new history file,
				since the default behaviour of the Command Window is to append to
				the existing file.
				
		"""
		self.edit(clearHistoryFile=value)
	#----------------------------------------------------------------------
	def get_historyFilename(self):
		"""
		
				Sets or returns the name of the file that the Command Window will
				use to echo all of its history to. If this is an empty string when
				the -wh/writeHistory flag is set to true, then it will automatically be
				set to the default file.
				
		"""
		return self.query(historyFilename=True)
	#----------------------------------------------------------------------
	def set_historyFilename(self, value):
		"""
		
				Sets or returns the name of the file that the Command Window will
				use to echo all of its history to. If this is an empty string when
				the -wh/writeHistory flag is set to true, then it will automatically be
				set to the default file.
				
		"""
		self.edit(historyFilename=value)
	#----------------------------------------------------------------------
	historyFilename = property(get_historyFilename, set_historyFilename)
	#----------------------------------------------------------------------
	def input(self,value):
		"""
		
				Sets the text in the lower field of the Command Window.
				Set this value to an empty string to clear the field.
				
				Note: this flag only affects the Command Window and not the new script editor.
				To find out how to manipulate the new script editor please refer to the documentation
				on the cmdScrollFieldExecuter and cmdScrollFieldReporter.
				
		"""
		self.edit(input=value)
	#----------------------------------------------------------------------
	def get_suppressErrors(self):
		"""
		
				When true, Command Window and Script Editor will not display error messages.
				
		"""
		return self.query(suppressErrors=True)
	#----------------------------------------------------------------------
	def set_suppressErrors(self, value):
		"""
		
				When true, Command Window and Script Editor will not display error messages.
				
		"""
		self.edit(suppressErrors=value)
	#----------------------------------------------------------------------
	suppressErrors = property(get_suppressErrors, set_suppressErrors)
	#----------------------------------------------------------------------
	def get_suppressInfo(self):
		"""
		
				When true, Command Window and Script Editor will not display info messages
				generated by Maya.
				
		"""
		return self.query(suppressInfo=True)
	#----------------------------------------------------------------------
	def set_suppressInfo(self, value):
		"""
		
				When true, Command Window and Script Editor will not display info messages
				generated by Maya.
				
		"""
		self.edit(suppressInfo=value)
	#----------------------------------------------------------------------
	suppressInfo = property(get_suppressInfo, set_suppressInfo)
	#----------------------------------------------------------------------
	def get_suppressResults(self):
		"""
		
				When true, Command Window and Script Editor will not display command results.
				
		"""
		return self.query(suppressResults=True)
	#----------------------------------------------------------------------
	def set_suppressResults(self, value):
		"""
		
				When true, Command Window and Script Editor will not display command results.
				
		"""
		self.edit(suppressResults=value)
	#----------------------------------------------------------------------
	suppressResults = property(get_suppressResults, set_suppressResults)
	#----------------------------------------------------------------------
	def get_suppressStackWindow(self):
		"""
		
				When true and when the stackTrace mechanism is on, this
				flag will suppress the display of the stack window. If stack
				trace is enabled then results will be returned to the output
				window instead of a separate stack window.
				
		"""
		return self.query(suppressStackWindow=True)
	#----------------------------------------------------------------------
	def set_suppressStackWindow(self, value):
		"""
		
				When true and when the stackTrace mechanism is on, this
				flag will suppress the display of the stack window. If stack
				trace is enabled then results will be returned to the output
				window instead of a separate stack window.
				
		"""
		self.edit(suppressStackWindow=value)
	#----------------------------------------------------------------------
	suppressStackWindow = property(get_suppressStackWindow, set_suppressStackWindow)
	#----------------------------------------------------------------------
	def get_suppressWarnings(self):
		"""
		
				When true, Command Window and Script Editor will not display warning messages.
				
		"""
		return self.query(suppressWarnings=True)
	#----------------------------------------------------------------------
	def set_suppressWarnings(self, value):
		"""
		
				When true, Command Window and Script Editor will not display warning messages.
				
		"""
		self.edit(suppressWarnings=value)
	#----------------------------------------------------------------------
	suppressWarnings = property(get_suppressWarnings, set_suppressWarnings)
	#----------------------------------------------------------------------
	def get_writeHistory(self):
		"""
		
				When true, Command Window will echo all of its
				history to the file defined by the -hf/historyFilename flag. This
				flag effectively turns file writing on/off.
				
		"""
		return self.query(writeHistory=True)
	#----------------------------------------------------------------------
	def set_writeHistory(self, value):
		"""
		
				When true, Command Window will echo all of its
				history to the file defined by the -hf/historyFilename flag. This
				flag effectively turns file writing on/off.
				
		"""
		self.edit(writeHistory=value)
	#----------------------------------------------------------------------
	writeHistory = property(get_writeHistory, set_writeHistory)